// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

        /** Initializes the library. */
        function void init() {

        let twoToThe=Array.new(16);
        let twoToThe[0]=1;
        let twoToThe[1]=2;
        let twoToThe[2]=4;
        let twoToThe[3]=8;
        let twoToThe[4]=16;
        let twoToThe[5]=32;
        let twoToThe[6]=64;
        let twoToThe[7]=128;
        let twoToThe[8]=256;
        let twoToThe[9]=512;
        let twoToThe[10]=1024;
        let twoToThe[11]=2048;
        let twoToThe[12]=4096;
        let twoToThe[13]=8192;
        let twoToThe[14]=16384;
        let twoToThe[15]=16384+16384;
        return;
        }

        function int getTwoP(int x) {
            return twoToThe[x];
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x<0){
                return -x;}

            return x;
        }

        function boolean bit(int x,int j)
        {
                return (x & twoToThe[j]);
        }
        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            var int sum,shiftedx,i;
            let sum = 0;
            let shiftedx = x;

            let i=0;
            while (i<16){
                if (Math.bit(y, i)= true){
                    let sum = sum + shiftedx;
                    }
                let shiftedx = shiftedx+shiftedx;
                let i=i+1;
                }
            if ((x>0) & (y>0)){
                return sum;
                }
            if ((x<0) & (y>0)){
                return -sum;
                }
            if ((x>0) & (y<0)){
                return -sum;
                }

            return sum;


        }


        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            var int flag1,flag2,q,res;
            let flag1=0;
            let flag2=0;
            let res=0;
            if (~(y>0)){
                let y=Math.abs(y);
                let flag1=1;
            }
            if (~(x>0)){
                let x=Math.abs(x);
                let flag2=1;
            }

            if (~(y < x))
            {
             return 0;
             }

            let q = Math.divide(x, y+y);
            if ((x - Math.multiply(q+q,y)) < y)
            {
                let res=q+q;
            }
            else
            {
                let res= q+q +1;
            }
            if (flag1=flag2)
            {
                return res;
            }
            return res;

        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            var int j,y,power;

            let j=7;
            let y=0;
            while (~(j<0)){

            let power=Math.multiply(y + twoToThe[j],y + twoToThe[j]);
            if (power < x+1){
                let y = y + twoToThe[j];
            }

            let j=j-1;}
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a<b)
            {
                return b;
            }

            return a;
        }


        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a<b)
            {
                return a;
            }

            return b;
        }

}
