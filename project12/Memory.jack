// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array memory;
    static int nextNode;
    static int free_size;
    static int freeList;
    static int base;
    function void init() {
        let memory = 0;
        let base = 2048;
        let freeList = base;
        let free_size = 16384 - base;
        let memory[base] = free_size;
        let memory[base + 1] = -1;
        let nextNode = freeList + 1;
        return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address]=value;
        return;
    }


    function int alloc(int size) {
	    var int next,res,curr,prev;
		let prev = freeList;
		let curr = freeList;
		let next = nextNode;
		let res = -1;

		while (~(memory[curr] > size) & ~(memory[next] = -1)) {
			let prev = curr;
			let curr = memory[next];
			let next = memory[next + 1];
		}
		if (~(next = -1)) {
			if (curr < (size + 3)) {
				let memory[prev + 1] = memory[curr + 1];
				let memory[curr] = size + 1;
				let res = curr + 1;
			}
			else {
				let memory[curr] = memory[curr] - size - 1;
				let res = curr + memory[curr];
				let memory[res - 1] = size + 1;
			}
		}
		return res;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        let memory[o] = memory[o - 1];
    	let memory[o + 1] = memory[freeList + 1];
    	let memory[freeList + 1] = o;
    	return;
}

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int size, i, max;
        let size = memory[o - 2] - 2; // Block size stored at o-2
        let i = 0;
        let max = o[i];
        while (i < size) {
            if (o[i] > max) {
                let max = o[i];
            }
            let i = i + 1;
        }
        return max;
        }
}

