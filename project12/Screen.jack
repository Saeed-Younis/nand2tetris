// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static Array screen;
        static boolean color;
       /** Initializes the Screen. */
        function void init() {
        let screen = 16384;
        return;

        }

        /** Erases the entire screen. */
        function void clearScreen() {
        var int i;
        let i=0;
        while (~(i>8192))
        {
        do Memory.poke(16384+i,0);
        let i=i+1;
        }
        return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
        let color=b;
        return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int address;
            var int value;
            var int mod ;
            let mod=x - ((x / 16) * 16);
            let address= (32*y) +(x/16);
            let value=Memory.peek(16384+address);

            if (color)
            {
            let screen[address] = value | Math.getTwoP(mod);
            }
            else
            {
            let screen[address] = value & ~Math.getTwoP(mod);
            }
            return;

        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int x,y,a,b,dx,dy,dff;
            // /
            let dx=Math.abs(x1-x2);
            let dy=Math.abs(y1-y2);
            if (dx>0 & dy>0)
            {
                let dff=0;
                let a=0;
                let b=0;
                let x=x1;
                let y=y1;

                while((a<(dx+1)) & (b<(dy+1)))
                    {
                        do Screen.drawPixel(x+a,y+b);
                        if (dff<0)
                        {
                        let a=a+1;
                        let dff=dff+dy;
                        }
                        else
                        {
                            let b=b+1;
                            let dff=dff-dx;
                        }

                    }
                return;
            }


            // |
            if (x1=x2)
            {
                let b=0;
                let dx=Math.min(y1,y2);
                let dy=Math.abs(y1-y2);
                while (b<dy){

                do Screen.drawPixel(x1,dx+b);
                let b=b+1;
                }
                return;
            }
            // -
            if (y1=y2)
            {
                let b=0;
                let dx=Math.min(x1,x2);
                let dy=Math.abs(x1-x2);
                while (b<dy)
                {
                    do Screen.drawPixel(dx+b,y1);
                    let b=b+1;
                }
                return;
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy,a,b;
        let b=Math.min(y1,y2);
        let dy=Math.abs(y1-y2);
        let a=0;
        while (a<(dy+1))
        {
            do Screen.drawLine(x1,b+a,x2,b+a);
            let a=a+1;

        }
        return;

        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy,halfWidth;
            let dy=-r;
            while (dy<(r+1))
            {
                let halfWidth = Math.sqrt(r*r - dy*dy);
                do Screen.drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy);
                let dy=dy+1;
            }
            return;

        }
}
